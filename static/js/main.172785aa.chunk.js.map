{"version":3,"sources":["styles/CenterWrapper.ts","styles/LayoutWrapper.ts","styles/Text.ts","containers/search-header/styles.ts","config/config.ts","components/card/styles.ts","components/card/Card.tsx","components/search-input/styles.ts","components/search-input/SearchInput.tsx","components/pagination/styles.ts","components/pagination/Pagination.tsx","containers/search-header/SearchHeader.tsx","hooks/useMovies.ts","helpers/removeDuplicates.ts","services/Http.ts","config/rootService.ts","services/MovieService.ts","containers/movie-list/MovieList.tsx","App.tsx","hooks/useDobounce.ts","reportWebVitals.ts","index.tsx"],"names":["CenterWrapper","styled","div","LayoutWrapper","Text","span","props","size","alignText","HeaderWrapper","appConfig","process","colors","Wrapper","Img","img","InfoWrapper","Button","button","DefaultPoster","Card","data","posterAltName","Title","Year","Type","type","onClick","window","open","imdbID","Poster","src","alt","width","height","SearchInput","input","query","handleSearch","placeholder","onChange","value","PaginationWrapper","PaginationButton","isActive","PaginationDots","Pagination","totalPages","currentPage","handlePageChange","arr","Array","from","keys","map","item","pages","slice","filter","page","lastPage","SearchHeader","handleQuery","e","target","useMovies","movieService","useState","movieList","setMovieList","setTotalPages","setCurrentPage","isLoading","setIsLoading","error","setError","handleMovieList","errorMsg","Math","floor","prepareQuery","split","Boolean","join","useEffect","getMovieList","s","then","Response","Error","jsonObject","JSON","stringify","uniqueSet","Set","parse","removeDuplicates","Search","Number","totalResults","catch","msg","HttpService","url","urlWithParams","objectToQueryString","makeRequest","fetch","response","ok","json","obj","Object","key","rootService","httpService","apikey","params","this","get","MovieList","movie","App","initialValue","time","setValue","debouncedValue","setDebouncedValue","debounce","setTimeout","clearTimeout","useDebounce","debouncedQuery","setQuery","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.172785aa.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const CenterWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    margin: 0 0.5rem;\n`;\n","import styled from 'styled-components';\n\nexport const LayoutWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;\n","import styled from 'styled-components';\n\ninterface Props {\n    size?: number;\n    alignText?: boolean;\n}\n\nexport const Text = styled.span<Props>`\n    font-family: 'Lato', sans-serif;\n    font-weight: bold;\n    color: black;\n    font-size: ${props => `${props.size}rem` || '1rem'};\n    padding: 0.5rem;\n    text-align: ${props => (props.alignText ? 'center' : 'none')}; ;\n`;\n","import styled from 'styled-components';\n\nimport { CenterWrapper } from '../../styles';\n\nexport const HeaderWrapper = styled(CenterWrapper)`\n    margin-bottom: 3rem;\n`;\n","export const appConfig = {\n    omdbUrl: 'https://www.omdbapi.com/',\n    omdbApiKey: process.env.REACT_APP_OMDB_API || '',\n};\n\nexport const colors = {\n    white: '#ffffff',\n    blue: '#0366d6',\n    grey: '#dddddd',\n    imdbYellow: '#f5c516',\n    darkerImdbYellow: '#e2b616',\n};\n","import styled from 'styled-components';\n\nimport { colors } from '../../config/config';\n\nexport const Wrapper = styled.div`\n    flex: 30% 1 auto;\n    display: flex;\n    flex-direction: row;\n    margin: 0.5rem 0;\n    padding: 1rem;\n    width: 25rem;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n    background-color: ${colors.white};\n    border-radius: 5px;\n\n    @media (max-width: 1199px) {\n        width: 20rem;\n    }\n`;\n\nexport const Img = styled.img`\n    width: 100%;\n    height: auto;\n    max-width: 200px;\n`;\n\nexport const InfoWrapper = styled.div`\n    width: 50%;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const Button = styled.button`\n    background-color: ${colors.imdbYellow};\n    color: black;\n    font-weight: 900;\n    border: none;\n    border-radius: 5px;\n    padding: 0.3rem 0rem;\n    max-width: 100px;\n    cursor: pointer;\n\n    :hover {\n        background-color: ${colors.darkerImdbYellow};\n    }\n`;\n\nexport const DefaultPoster = styled.div`\n    height: 270px;\n    max-width: 200px;\n    background-color: ${colors.grey};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 3rem;\n    color: ${colors.white};\n    text-align: center;\n`;\n","import { Text } from '../../styles';\nimport { MovieItem } from '../../types';\nimport * as S from './styles';\n\ninterface PropsTypes {\n    data: MovieItem;\n}\n\nexport const Card = ({ data }: PropsTypes) => {\n    const posterAltName = `${data.Title}poster`;\n    const openIMDB = () => window.open(`https://www.imdb.com/title/${data.imdbID}/`);\n\n    return (\n        <S.Wrapper>\n            <S.InfoWrapper>\n                <Text size={2}>{data.Title}</Text>\n                <S.InfoWrapper>\n                    <Text size={1.7}>{data.Year}</Text>\n                    <Text size={1.3}>{data.Type}</Text>\n                </S.InfoWrapper>\n\n                <S.Button type=\"button\" onClick={() => openIMDB()}>\n                    Go to IMBb\n                </S.Button>\n            </S.InfoWrapper>\n            <S.InfoWrapper>\n                {data.Poster !== 'N/A' ? (\n                    <S.Img src={data.Poster} alt={posterAltName} width=\"100\" height=\"200\" />\n                ) : (\n                    <S.DefaultPoster>No poster</S.DefaultPoster>\n                )}\n            </S.InfoWrapper>\n        </S.Wrapper>\n    );\n};\n","import styled from 'styled-components';\n\nexport const SearchInput = styled.input`\n    font-family: 'Lato', sans-serif;\n    font-weight: bold;\n    font-size: 1rem;\n\n    width: 100%;\n    background-color: transparent;\n    margin: 0;\n    color: black;\n    word-wrap: break-word;\n    outline: none;\n    display: flex;\n    flex: 100%;\n    height: 34px;\n    padding: 0.4rem 1rem;\n    font-size: 1.5rem;\n    border-radius: 24px;\n    border: none;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n\n    :hover,\n    :focus {\n        box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n    }\n`;\n","import { ChangeEvent } from 'react';\n\nimport { SearchInput as Input } from './styles';\nimport { QueryValue } from '../../types';\n\ninterface PropsTypes {\n    query: QueryValue;\n    placeholder: string;\n    handleSearch: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchInput = ({ query, handleSearch, placeholder }: PropsTypes) => {\n    return (\n        <>\n            <Input type=\"text\" onChange={handleSearch} value={query} placeholder={placeholder} />\n        </>\n    );\n};\n","import styled from 'styled-components';\n\nimport { colors } from '../../config/config';\n\ninterface PaginationButtonProps {\n    isActive?: boolean;\n}\n\nexport const PaginationWrapper = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n\n    margin: 30px 0;\n`;\n\nexport const PaginationButton = styled.button<PaginationButtonProps>`\n    border-radius: 4px;\n    font-size: 1rem;\n    height: 34px;\n    min-width: 34px;\n    padding: 0 0.5rem;\n    transition: 0.3s cubic-bezier(0, 0, 0.2, 1);\n    width: auto;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: 1px solid ${colors.grey};\n    margin: 5px 5px;\n    background-color: ${({ isActive }) => (isActive ? colors.grey : colors.white)};\n`;\n\nexport const PaginationDots = styled.span`\n    display: flex;\n    align-items: center;\n`;\n","import { PaginationWrapper, PaginationButton, PaginationDots } from './styles';\n\ninterface PropsTypes {\n    totalPages: number;\n    currentPage: number;\n    handlePageChange: (page: number) => void;\n}\n\nexport const Pagination = ({ totalPages, currentPage, handlePageChange }: PropsTypes) => {\n    const arr = Array.from(Array(totalPages).keys()).map(item => item + 1);\n    const preparedPages =\n        currentPage < 5\n            ? arr.slice(1, 6)\n            : totalPages <= currentPage + 2\n            ? arr.slice(totalPages - 6, totalPages - 1)\n            : arr.slice(currentPage - 3, currentPage + 2);\n    const pages = preparedPages.filter(page => page !== 1 && page !== totalPages);\n    const lastPage = pages.slice(-1)[0];\n\n    return (\n        <PaginationWrapper>\n            <PaginationButton isActive={currentPage === 1} onClick={() => handlePageChange(1)}>\n                1\n            </PaginationButton>\n            {currentPage > 4 && <PaginationDots>...</PaginationDots>}\n            {pages.map(page => (\n                <PaginationButton\n                    isActive={currentPage === page}\n                    key={page}\n                    onClick={() => handlePageChange(page)}\n                >\n                    {page}\n                </PaginationButton>\n            ))}\n            {lastPage && lastPage < totalPages - 1 && <PaginationDots>...</PaginationDots>}\n            {totalPages !== 1 && (\n                <PaginationButton\n                    isActive={currentPage === totalPages}\n                    onClick={() => handlePageChange(totalPages)}\n                >\n                    {totalPages}\n                </PaginationButton>\n            )}\n        </PaginationWrapper>\n    );\n};\n","import { ChangeEvent } from 'react';\n\nimport { Text } from '../../styles';\nimport { HeaderWrapper } from './styles';\nimport { SearchInput } from '../../components';\nimport { QueryValue } from '../../types';\n\ninterface PropsTypes {\n    query: QueryValue;\n    handleQuery: (e: string) => void;\n}\n\nexport const SearchHeader = ({ query, handleQuery }: PropsTypes) => {\n    const handleSearch = (e: ChangeEvent<HTMLInputElement>) => {\n        handleQuery(e.target.value);\n    };\n\n    return (\n        <HeaderWrapper>\n            <Text size={5} alignText>\n                Search movies\n            </Text>\n            <SearchInput query={query} handleSearch={handleSearch} placeholder=\"Search movies\" />\n        </HeaderWrapper>\n    );\n};\n","import { MovieItem } from './../types';\nimport { useEffect, useState } from 'react';\nimport { RootService } from '../config/rootService';\nimport { removeDuplicates } from '../helpers';\n\nexport const useMovies = ({ movieService }: RootService, query: string) => {\n    const [movieList, setMovieList] = useState<MovieItem[]>([]);\n    const [totalPages, setTotalPages] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const handleMovieList = (movieList: MovieItem[], totalPages: number, errorMsg: string) => {\n        setError(errorMsg);\n        setMovieList(movieList);\n        setTotalPages(() => Math.floor(totalPages / 10));\n        setIsLoading(false);\n    };\n\n    const prepareQuery = (query: string) => query.split(' ').filter(Boolean).join(' ');\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [query, setCurrentPage]);\n\n    useEffect(() => {\n        setIsLoading(true);\n        movieService\n            .getMovieList({ s: prepareQuery(query), page: currentPage })\n            .then(data =>\n                data.Response === 'False'\n                    ? handleMovieList([], 0, data.Error)\n                    : handleMovieList(removeDuplicates(data.Search), Number(data.totalResults), ''),\n            )\n            .catch(e => {\n                setIsLoading(false);\n                setError(e.msg);\n            });\n    }, [query, currentPage, movieService]);\n\n    return { movieList, totalPages, currentPage, setCurrentPage, error, isLoading };\n};\n","export const removeDuplicates = <T>(arr: T[]): T[] => {\n    const jsonObject = arr.map(item => JSON.stringify(item));\n    const uniqueSet = new Set(jsonObject);\n    const uniqueArray: T[] = Array.from(uniqueSet).map(item => JSON.parse(item));\n\n    return uniqueArray;\n};\n","type QueryParams = Record<string, string | number | boolean>;\n\nexport class HttpService {\n    public get<T>(url: string, query: QueryParams): Promise<T> {\n        const urlWithParams = `${url}?${HttpService.objectToQueryString(query)}`;\n\n        return HttpService.makeRequest(urlWithParams);\n    }\n\n    private static makeRequest<ResponseData>(url: string): Promise<ResponseData> {\n        return fetch(url)\n            .then(response => response.ok && response.json())\n            .catch(e => {\n                throw new Error('Failed to fatch movie list');\n            });\n    }\n\n    public static objectToQueryString(obj: QueryParams): string {\n        return Object.keys(obj)\n            .map(key => `${key}=${obj[key]}`)\n            .join('&');\n    }\n}\n","import { HttpService } from '../services/Http';\nimport { MovieService } from '../services/MovieService';\nimport { appConfig } from './config';\n\nexport const httpService = new HttpService();\nexport const movieService = new MovieService(httpService, appConfig.omdbUrl, appConfig.omdbApiKey);\nexport const rootService = { movieService };\n\nexport type RootService = typeof rootService;\n","import { MovieResponse } from '../types';\nimport { HttpService } from './Http';\n\nexport class MovieService {\n    constructor(\n        private httpService: HttpService,\n        private readonly url: string,\n        private readonly apikey: string,\n    ) {}\n\n    public getMovieList(params: any): Promise<MovieResponse> {\n        return this.httpService.get(this.url, { ...params, apikey: this.apikey });\n    }\n}\n","import { useMovies } from '../../hooks/useMovies';\nimport { CenterWrapper, Text } from '../../styles';\nimport { rootService } from '../../config/rootService';\nimport { Card, Pagination } from '../../components';\nimport { QueryValue } from '../../types';\n\ninterface PropsTypes {\n    query: QueryValue;\n}\n\nexport const MovieList = ({ query }: PropsTypes) => {\n    const { movieList, totalPages, currentPage, setCurrentPage, isLoading, error } = useMovies(\n        rootService,\n        query,\n    );\n\n    const handlePageChange = (page: number) => {\n        setCurrentPage(page);\n    };\n\n    return (\n        <>\n            {isLoading && <Text size={2}>Loading...</Text>}\n            {!isLoading && (\n                <>\n                    <CenterWrapper>\n                        {!error && movieList.map(movie => <Card data={movie} key={movie.imdbID} />)}\n                        {error && <Text size={2}>{error}</Text>}\n                    </CenterWrapper>\n                    {totalPages !== 0 && (\n                        <Pagination\n                            totalPages={totalPages}\n                            currentPage={currentPage}\n                            handlePageChange={handlePageChange}\n                        />\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n","import { SearchHeader, MovieList } from './containers';\nimport { useDebounce } from './hooks';\nimport { LayoutWrapper } from './styles';\n\nexport const App = () => {\n    const [debouncedQuery, query, setQuery] = useDebounce('', 500);\n\n    return (\n        <LayoutWrapper>\n            <SearchHeader query={query} handleQuery={setQuery} />\n            <MovieList query={debouncedQuery} />\n        </LayoutWrapper>\n    );\n};\n","import { useEffect, useState } from 'react';\n\nexport const useDebounce = <T>(initialValue: T, time: number): [T, T, React.Dispatch<T>] => {\n    const [value, setValue] = useState<T>(initialValue);\n    const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\n\n    useEffect(() => {\n        const debounce = setTimeout(() => {\n            setDebouncedValue(value);\n        }, time);\n        return () => {\n            clearTimeout(debounce);\n        };\n    }, [value, time]);\n\n    return [debouncedValue, value, setValue];\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}